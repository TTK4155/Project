
Testproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f5  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070a  00000000  00000000  000009cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000366  00000000  00000000  000010d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001440  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cc  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000026  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000189a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  80:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <My_serial_Init>:


void My_serial_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(31>>8);
  88:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)31;
  8a:	8f e1       	ldi	r24, 0x1F	; 31
  8c:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  8e:	88 e1       	ldi	r24, 0x18	; 24
  90:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
  92:	8e e8       	ldi	r24, 0x8E	; 142
  94:	80 bd       	out	0x20, r24	; 32
  96:	08 95       	ret

00000098 <My_serial_Transmit>:
}

void My_serial_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
  98:	5d 9b       	sbis	0x0b, 5	; 11
  9a:	fe cf       	rjmp	.-4      	; 0x98 <My_serial_Transmit>
	/* Put data into buffer, sends the data */
	UDR0 = data;
  9c:	8c b9       	out	0x0c, r24	; 12
  9e:	08 95       	ret

000000a0 <main>:
#define MYUBRR FOSC/16/BAUD-1


int main( void )
{
	My_serial_Init ( MYUBRR );
  a0:	8f e3       	ldi	r24, 0x3F	; 63
  a2:	91 e0       	ldi	r25, 0x01	; 1
  a4:	0e 94 44 00 	call	0x88	; 0x88 <My_serial_Init>
	while(1){
		My_serial_Transmit('4');
  a8:	84 e3       	ldi	r24, 0x34	; 52
  aa:	0e 94 4c 00 	call	0x98	; 0x98 <My_serial_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	9e e0       	ldi	r25, 0x0E	; 14
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x14>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x1e>
  be:	00 00       	nop
  c0:	f3 cf       	rjmp	.-26     	; 0xa8 <main+0x8>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
